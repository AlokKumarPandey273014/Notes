✅ Que 1- What is CSS?
• Stands for Cascading Style Sheets
• It Controls how HTML elements are displayed
• It Manages layouts, colors, fonts and responsiveness
• It Works with HTML to style web pages
• External stylesheets use .css files

Exp:

selector {
  property: value;
}

Advantage :-
• Saves time with reusable styles
• Enables responsive designs
• Separates content from presentation
• Lightweight and fast-loading

------------------------------------------------------------------------------------------------------------

✅ Que 2- Why to use css?
CSS is used to define styles and design for your web pages, layout and responsive for different devices and screen sizes.

------------------------------------------------------------------------------------------------------------

✅ Que 3- CSS Syntex?
A CSS rule consists of a selector and a declaration block.
The selector points to the HTML element we want to style.
The declaration block contains one or more declarations separated by semicolons(;)
Each declaration includes a CSS property name and a value, separated by a colon - property: value
Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.

------------------------------------------------------------------------------------------------------------

✅ Que 4- 	What is Selecter?
Selector is used to target HTML elements so we can apply styles on them.  
It tells the browser which elements the CSS rules should be applied .

Types of selectors:
1. Type Selector (element) → selects by tag name.                                    Example: p { color: blue; }
2. Class Selector (.classname) → selects elements with a class.                      Example: .btn { background: green; }
3. ID Selector (#idname) → selects an element with a specific id.                    Example: #header { font-size: 20px; }
4. Group Selector (A, B, C) → applies same style to multiple elements.               Example: h1, h2, p { font-family: Arial; }
5. Descendant Selector (A B) → selects elements inside another.                      Example: div p { color: red; }  
6. Pseudo-classes (:hover, :first-child, etc.) → style elements in a special state.  Example: a:hover { color: orange; }
7. Pseudo-elements (::before, ::after, etc.) → style parts of an element.            Example: p::first-letter { font-size: 30px; }
8 Universal Selector (*) → selects all elements.                                     Example: * { margin: 0; padding: 0; }

------------------------------------------------------------------------------------------------------------
 
✅ Que 5- How to Add CSS?
There are 3 ways to add CSS to HTML:-
1. Inline CSS → style is written inside the HTML tag itself (using the style attribute).
                         Example: <p style="color: red; font-size: 18px;">Hello World</p>
  

2. Internal CSS → style is written inside a <style> tag within the <head> of HTML.
           Example:
             <head>
               <style>
                 p { color: blue; }
               </style>
            </head>

3. External CSS → style is written in a separate .css file, then linked to the HTML.
                  Example:
                  <head>
                      <link rel="stylesheet" href="styles.css">
                  </head>
                  (styles.css file → p { color: green; })

Note- An inline style has  highest priority, and will override external and internal styles and browser defaults.

------------------------------------------------------------------------------------------------------------

✅ Que 6- What is Comments?
In CSS, comments are used to explain code or make it easier to read.  
They are ignored by the browser and do not affect the output.

Syntax:     /* This is a CSS comment */

Types of comments in CSS:
1. Single-line comment:    /* This is a single-line comment */
2. Multi-line comment:
   /* 
      This is a 
      multi-line comment 
   */

Example:
  h1 {
    color: blue;  /* Sets text color */
    font-size: 24px;  /* Sets font size */
  }

------------------------------------------------------------------------------------------------------------

✅ Que 7-  what are Css Error?
Errors in CSS can lead to unexpected behavior or styles not being applied correctly.  
Browsers are usually forgiving, but incorrect CSS can cause styles to break or be ignored. 
 
Here are the most common CSS mistakes and how to avoid them:
1. Missing Semicolons       ;          Always end properties with a semicolon.
2. Invalid Property Names   colr: blue;
3. Invalid Values           width: -100px;
4. Unclosed Braces          .bad {
5. Extra Colons or Braces   color:: blue;

Tips to Avoid CSS Errors:
 Validate your CSS using a linter or CSS validator.
 Write CSS in small sections and test frequently.

------------------------------------------------------------------------------------------------------------

✅ Que 8- How To Define Css Color?
Colors are used to style text, backgrounds, borders, and other elements.  

There are multiple ways to define colors in CSS-
1. Named Colors  - Use predefined color names (140 standard colors).     h1 { color: red/lightblue; ; }
2. Hexadecimal Colors  - Represented with a # followed by 3 or 6 hexadecimal digits.
                          Exp:   h1 { color: #ff0000; }   /* red */
                                 p { color: #00ff00; }    /* green */
                                 div { color: #0000ff; }  /* blue */

3. RGB Colors   - Defined using the rgb(red, green, blue) function. Each value ranges from 0 to 255.
                  Exp:  p { color: rgb(255, 0, 0); }    /* red */
                  
4. RGBA Colors - Similar to RGB but with an alpha channel for transparency (0.0 to 1.0).
                 Exp:- div { background-color: rgba(0, 0, 0, 0.5); }  /* black with 50% transparency */
   
5. HSL Colors  - Defined using hsl(hue, saturation, lightness). Hue: 0-360 (color wheel), Saturation: % of intensity, Lightness: % of brightness.
                 Example:  p { color: hsl(0, 100%, 50%); }   /* red */
                           p { color: hsl(120, 100%, 50%); } /* green */
                           p { color: hsl(240, 100%, 50%); } /* blue */

6. HSLA Colors  -  HSL with alpha channel for transparency.
                   Example: div { background-color: hsla(200, 100%, 50%, 0.3); }  
  
7. Currentcolor Keyword - Uses the current text color of an element for other properties.
                          Exp:
                              div {
                                    color: blue;
                                    border: 2px solid currentcolor;  /* border becomes blue */
                                  }
8. Transparent Keyword - Makes color fully transparent. 
                         Exp:  div { background-color: transparent; }
   

Notes- Common CSS Properties that use color:
       color → text color
       background-color → background fill
       border-color → border color
       outline-color → outline color

------------------------------------------------------------------------------------------------------------

✅ Que 9- What is CSS Background Property?
CSS Background Properties – Quick Summary

1. background-color - Sets the background color of an element.
                      Example: body { background-color: lightblue; }

2. background-image - Sets an image as the background.
                      Example: body { background-image: url("img.jpg"); }

3. background-repeat - Controls how/if a background image repeats.
                       Values: repeat (default), repeat-x, repeat-y, no-repeat
                       Example: body { background-repeat: no-repeat; }

4. background-position - Sets the starting position of a background image.
                         Values: top, bottom, left, right, center, or coordinates
                         Example: body { background-position: right top; }

5. background-attachment - Sets whether the background image scrolls with the page or stays fixed.
                           Values: scroll (default), fixed, local
                           Example: body { background-attachment: fixed; }

6. background-size - Defines the size of a background image.
                     Values: auto, cover, contain, px, %
                     Example: body { background-size: cover; }

7. background-origin - Defines the positioning area of the background image.
                       Values: border-box, padding-box (default), content-box
                       Example: body { background-origin: content-box; }

8. background-clip - Defines the painting area of the background color/image.
                     Values: border-box (default), padding-box, content-box
                     Example: body { background-clip: padding-box; }

9. background (shorthand) - Sets all background properties in one line.
                            Example:    body { background: #ffffff url("img.jpg") no-repeat right top fixed; }
  
------------------------------------------------------------------------------------------------------------

✅ Que 10- CSS Border?
1️ CSS Border Style  
 Defines the style of borders.  
 Values: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden  
 Must be set, otherwise other border properties have no effect.  
  Exp:  p { border-style: solid; }

2️ CSS Border Width  
 Defines the width/thickness of borders.  
 Units: px, em, cm, etc.  
 Keywords: thin, medium, thick.  
 Can set one to four values (top, right, bottom, left).  
  Exp:  p { border-style: solid; border-width: 5px 20px; }

3️ CSS Border Color  
 Defines the color of borders.  
 Formats: name (red), HEX (#ff0000), RGB (rgb(255,0,0)), HSL (hsl(0,100%,50%)), transparent.  
 Can set one to four values for sides.  
  Exp:  p { border-style: solid; border-color: red green blue yellow; }

4️ CSS Border Sides  
 Set border for individual sides.  
 Properties: border-top-style, border-right-style, border-bottom-style, border-left-style.  
 Shorthand also possible with multiple values.  
  Exp:   p { border-style: dotted solid double dashed; }  

5️ CSS Border Shorthand Property  
 Combines width + style + color in one.  
 Format: border: width style color;  
 Works for individual sides too (border-left, border-top, etc.).  
   Exp:  p { border: 5px solid red; } 

6️ CSS Rounded Borders  
 Use border-radius to round corners.  
 Larger values = more rounded (can create circles).  
Exp:  p { border: 2px solid red; border-radius: 10px; }

Quick Recap:  
 border-style → required for borders to appear.  
 border-width → thickness.  
 border-color → color.  
 border-sides → style each side individually.  
 border → shorthand for width + style + color.  
 border-radius → rounded corners. 

------------------------------------------------------------------------------------------------------------

✅ Que 11- CSS Margin?
space outside element’s border is known as margin.  
Controls spacing between elements.  
Properties: margin-top, margin-right, margin-bottom, margin-left.  
 Values:
    auto → browser calculates
    length (px, em, cm, etc.)
    % → relative to parent width
    inherit → from parent
    Negative values allowed

Shorthand:
 4 values → margin: top right bottom left;     p { margin: 25px 50px 75px 100px; }
 3 values → margin: top right/left bottom;
 2 values → margin: top/bottom right/left;
 1 value → margin: all sides;

 Centering:  div { width: 300px; margin: auto; }
 Inherit: p { margin-left: inherit; }

 CSS Margin Collapse :-
 Only happens for vertical margins (top + bottom).  
 If two elements’ margins meet → they collapse into one.  
 Final margin = larger of the two values.  
 Doesn’t happen for left/right margins.
 Example:
h1 { margin-bottom: 50px; }  
h2 { margin-top: 20px; }  
 Final space = 50px (not 70px)

p { margin: 30px 0; }  
 Space between <p> = 30px (not 60px)

 CSS Margin Properties (Quick List)
 margin → shorthand
 margin-top
 margin-right
 margin-bottom
 margin-left

------------------------------------------------------------------------------------------------------------

✅ Que 12- CSS Padding?
 Padding = space inside element’s border, around content.    
 Properties: padding-top, padding-right, padding-bottom, padding-left  
 Values:
    length (px, em, etc.)
    % (relative to parent width)
    inherit (from parent)
   ❌ Negative values not allowed  

  Shorthand Property
 4 values → padding: top right bottom left;
 3 values → padding: top right/left bottom;
 2 values → padding: top/bottom right/left;
 1 value → all sides;
 Example:  div { padding: 25px 50px 75px 100px; }  

 Padding & Element Width (Box Model)
 width = content area only (by default).  
 Actual total width = content + padding + border.  
 Example:  div { width: 300px; padding: 25px; }   
 Actual width = 350px  

 box-sizing
 content-box (default) → width = content only.  
 border-box → width = content + padding + border (keeps fixed size).  
 Example:  div { width: 300px; padding: 25px; box-sizing: border-box; }   
 Width stays 300px  

CSS Padding Properties (Quick List)
 padding → shorthand  

------------------------------------------------------------------------------------------------------------

✅ Que 13- CSS Height, Width & Max-width – Notes
height & width → set element’s dimensions (inside padding, border, margin).  
max-width → restricts maximum width (prevents overflow & scrollbars).  
min-width / min-height → ensures element doesn’t shrink too small.  

Values for height & width
 auto → (default) browser decides.  
 length → px, em, cm, etc.  
 % → relative to parent/container.  
 initial → resets to default.  
 inherit → takes value from parent.  

 Note → height & width do not include padding, border, margin.  
 Examples
div {
  height: 200px;
  width: 50%;
  background-color: powderblue;
}

div {
  height: 100px;
  width: 500px;
  background-color: powderblue;
}

Using max-width :-
Prevents element from growing beyond limit.  
Better for responsive design (avoids horizontal scroll).  

Example:
.div1 {
  width: 100%;       /* takes full space */
  max-width: 900px;  /* but never larger than 900px */
  background: powderblue;
}

Example (width vs max-width):
.div1 { max-width: 500px; }  
.div2 { width: 500px; }  

Resize window: `.div1` adapts, `.div2` causes scrollbar.

All CSS Dimension Properties
 height → sets element height  
 width → sets element width  
 max-height → maximum height allowed  
 max-width → maximum width allowed  
 min-height → minimum height allowed  
 min-width → minimum width allowed  

------------------------------------------------------------------------------------------------------------

✅ Que 14- CSS Box Model
Every HTML element is a rectangular box.  
It consists of 4 parts (from inside → outside):
1) Content → actual text, image, or other element.  
2) Padding → transparent space around content (inside border).  
3) Border → wraps content + padding.  
4) Margin → transparent space outside border (between elements).  

Visual Structure

[ Margin ]
   [ Border ]
      [ Padding ]
         [ Content ]

Example
div {
  width: 300px;            /* content area width */
  border: 15px solid green;
  padding: 50px;
  margin: 20px;
}

Width & Height Calculation

Total Width  
= content width  
+ left padding + right padding  
+ left border + right border  

Total Height  
= content height  
+ top padding + bottom padding  
+ top border + bottom border  

Note: Margin is not included in element’s size,  
but it affects spacing around the element.  

Example Calculation
div {
  width: 320px;
  height: 50px;
  padding: 10px;        /* top + bottom = 20px, left + right = 20px */
  border: 5px solid gray;  /* top + bottom = 10px, left + right = 10px */
  margin: 0;
}

Total Width = 320 + 20 + 10 = 350px  
Total Height = 50 + 20 + 10 = 80px  

box-sizing Property :-
content-box (default): width & height include only content.  
border-box: width & height include padding + border.  
Example (keeps total width fixed):
div {
  width: 300px;
  padding: 20px;
  border: 10px solid black;
  box-sizing: border-box;   /* total width = 300px (not 360px) */
}














